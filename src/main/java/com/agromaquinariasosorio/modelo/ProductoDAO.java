package com.agromaquinariasosorio.modelo;

import com.agromaquinariasosorio.config.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.sql.SQLException;

public class ProductoDAO extends Conexion {

  Connection con;
  Conexion cn = new Conexion();
  PreparedStatement ps;
  ResultSet rs;

  public List<Producto> retrieveProductsByIdCategoria(final Integer idCategoria) {
    List<Producto> p = new ArrayList<>();
    String sql = "SELECT * FROM PRODUCTO WHERE ID_CATEGORIA=" + idCategoria;
    try {
      ps = cn.getConnection().prepareStatement(sql);
      rs = ps.executeQuery();
      while (rs.next()) {
        Producto pro = new Producto();
        pro.setIdProducto(rs.getInt(1));
        pro.setIdCategoria(new Categoria());
        pro.getIdCategoria().setIdCategoria(rs.getInt(2));
        pro.setNombre(rs.getString(3));
        pro.setDescripcion(rs.getString(4));
        pro.setPrecio(rs.getBigDecimal(5));
        pro.setStock(rs.getInt(6));
        pro.setImagen(rs.getString(7));
        p.add(pro);
      }
    } catch (SQLException e) {
      System.out.println("Ocurrio un error al obtener los datos desde la base de datos" + e.getMessage());
    }
    return p;
  }

  /**
   * Obtiene un listado de todos los productos con la información de su
   * categoría.
   *
   * @return Una lista de objetos Producto.
   */
  public List<Producto> listar() {
    List<Producto> lista = new ArrayList<>();
    // Query para seleccionar todos los campos del producto y el nombre de la categoría
    String sql = "SELECT P.id_producto, P.id_categoria, P.nombre, P.descripcion, "
            + "P.precio, P.stock, P.imagen, C.nombre AS nombre_categoria "
            + "FROM Producto P INNER JOIN Categoria C ON P.id_categoria = C.id_categoria";

    try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) { // Ejecutar la consulta

      while (rs.next()) {
        Producto p = new Producto();
        p.setIdProducto(rs.getInt("id_producto"));
        p.setNombre(rs.getString("nombre"));
        p.setDescripcion(rs.getString("descripcion"));
        p.setPrecio(rs.getBigDecimal("precio")); // Usar getBigDecimal
        p.setStock(rs.getInt("stock"));
        p.setImagen(rs.getString("imagen"));

        // Crear y asignar el objeto Categoria
        Categoria categoria = new Categoria();
        categoria.setIdCategoria(rs.getInt("id_categoria")); // Puedes establecer el ID de la categoría
        categoria.setNombre(rs.getString("nombre_categoria"));
        p.setIdCategoria(categoria);

        lista.add(p);
      }
    } catch (SQLException e) {
      System.err.println("Error al listar productos: " + e.getMessage());
    }
    return lista;
  }

  /**
   * Registra un nuevo producto en la base de datos. El id_producto se genera
   * automáticamente por la base de datos.
   *
   * @param pro El objeto Producto a registrar.
   * @throws Exception Si ocurre un error al registrar el producto.
   */
  public void registrarProducto(final Producto pro) throws Exception {
    // id_producto no se incluye en la lista de columnas porque es GENERATED BY DEFAULT ON NULL AS IDENTITY
    String sql = "INSERT INTO Producto (id_categoria, nombre, descripcion, precio, stock, imagen) "
            + "VALUES (?, ?, ?, ?, ?, ?)";

    try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

      ps.setInt(1, pro.getIdCategoria().getIdCategoria()); // id_categoria
      ps.setString(2, pro.getNombre());
      ps.setString(3, pro.getDescripcion());
      ps.setBigDecimal(4, pro.getPrecio()); // Usar setBigDecimal
      ps.setInt(5, pro.getStock());
      ps.setString(6, pro.getImagen());

      int affectedRows = ps.executeUpdate(); // Ejecutar la inserción
      if (affectedRows > 0) {
        System.out.println("Producto '" + pro.getNombre() + "' registrado exitosamente.");
      } else {
        System.out.println("No se pudo registrar el producto.");
      }
    } catch (SQLException e) {
      System.err.println("Error al registrar producto: " + e.getMessage());
      throw new Exception("Error al registrar el producto en la base de datos.", e);
    }
  }

  /**
   * Lee un producto de la base de datos por su ID.
   *
   * @param idProducto El ID del producto a leer.
   * @return El objeto Producto si se encuentra, null en caso contrario.
   * @throws Exception Si ocurre un error al leer el producto.
   */
  public Producto leer(final Integer idProducto) throws Exception {
    Producto prod = null;
    String sql = "SELECT P.id_producto, P.id_categoria, P.nombre, P.descripcion, "
            + "P.precio, P.stock, P.imagen, C.nombre AS nombre_categoria "
            + "FROM Producto P INNER JOIN Categoria C ON P.id_categoria = C.id_categoria "
            + "WHERE P.id_producto = ?";

    try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

      ps.setInt(1, idProducto); // Establecer el ID del producto
      try (ResultSet rs = ps.executeQuery()) { // Ejecutar la consulta
        if (rs.next()) {
          prod = new Producto();
          prod.setIdProducto(rs.getInt("id_producto"));
          prod.setNombre(rs.getString("nombre"));
          prod.setDescripcion(rs.getString("descripcion"));
          prod.setPrecio(rs.getBigDecimal("precio")); // Usar getBigDecimal
          prod.setStock(rs.getInt("stock"));
          prod.setImagen(rs.getString("imagen"));
          // Crear y asignar el objeto Categoria
          Categoria categoria = new Categoria();
          categoria.setIdCategoria(rs.getInt("id_categoria"));
          categoria.setNombre(rs.getString("nombre_categoria"));
          prod.setIdCategoria(categoria);
        }
      }
    } catch (SQLException e) {
      System.err.println("Error al leer producto: " + e.getMessage());
      throw new Exception("Error al leer el producto de la base de datos.", e);
    }
    return prod;
  }

  /**
   * Actualiza la información de un producto existente en la base de datos.
   *
   * @param pro El objeto Producto con la información actualizada.
   * @throws Exception Si ocurre un error al actualizar el producto.
   */
  public void actualizar(final Producto pro) throws Exception {
    // Asegúrate de que el ID del producto esté en el objeto 'pro'
    String sql = "UPDATE Producto SET nombre = ?, descripcion = ?, precio = ?, stock = ?, "
            + "imagen = ?, id_categoria = ? WHERE id_producto = ?";

    try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

      ps.setString(1, pro.getNombre());
      ps.setString(2, pro.getDescripcion());
      ps.setBigDecimal(3, pro.getPrecio()); // Usar setBigDecimal
      ps.setInt(4, pro.getStock());
      ps.setString(5, pro.getImagen());
      ps.setInt(6, pro.getIdCategoria().getIdCategoria()); // Actualizar la categoría
      ps.setInt(7, pro.getIdProducto()); // Cláusula WHERE

      int affectedRows = ps.executeUpdate(); // Ejecutar la actualización
      if (affectedRows > 0) {
        System.out.println("Producto con ID " + pro.getIdProducto() + " actualizado exitosamente.");
      } else {
        System.out.println("No se encontró ningún producto con ID " + pro.getIdProducto() + " para actualizar.");
      }
    } catch (SQLException e) {
      System.err.println("Error al actualizar producto: " + e.getMessage());
      throw new Exception("Error al actualizar el producto en la base de datos.", e);
    }
  }
}
